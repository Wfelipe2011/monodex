import { Injectable } from '@nestjs/common';
import { Lead } from '@prisma/client';

const bairrosSorocaba = [
    "Campolim",
    "Centro",
    "Vila Hort√™ncia",
    "Jardim Europa",
    "Al√©m Ponte",
    "Jardim Santa B√°rbara",
    "Wanel Ville",
    "Jardim Paulistano",
    "Vila Bar√£o",
    "Jardim Ipiranga",
    "Jardim Ast√∫rias",
    "Vila Santana",
    "Jardim S√£o Paulo",
    "Parque Campolim",
    "Jardim Em√≠lia",
    "Vila Haro",
    "Jardim Santa Ros√°lia",
    "Parque S√£o Bento",
    "Vila Carvalho",
    "Jardim Marcelo Augusto",
    "Vila S√£o Jo√£o",
    "Jardim Ref√∫gio",
    "Jardim Maria Eug√™nia",
    "Parque das Laranjeiras",
    "Jardim Santo Andr√©",
    "Vila Le√£o",
    "Jardim Abaet√©",
    "Vila Progresso",
    "Jardim Am√©rica",
    "Vila Sabi√°"
];

@Injectable()
export class GoogleMapsScraper {
    private categories = [
        // 'Construtoras',
        // 'Escrit√≥rios de advocacia',
        // 'Cl√≠nicas m√©dicas',
        // 'Cl√≠nicas odontol√≥gicas',
        // 'Consult√≥rios',
        // 'Est√©ticas',
        // 'Consutorias',
        // 'Cursos de ingl√™s',
        // 'Ag√™ncia Marketing Digital',
        // 'Web Design',
        "Farm√°cias",
        "Supermercados",
        "Pet Shops",
        "Mercearias",
    ];

    async scrapeSorocabaLeads(cb: (body: Lead[]) => Promise<void>) {
        console.log('üîß Iniciando o scraper do Google Maps...');
        const puppeteer = require('puppeteer-extra');
        const Stealth = require('puppeteer-extra-plugin-stealth')();
        puppeteer.use(Stealth);

        console.log('üîß Abrindo navegador...');
        const browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        const page = await browser.newPage();

        // Configura√ß√µes de viewport para melhor renderiza√ß√£o
        await page.setViewport({ width: 1440, height: 900 });
        console.log('üîß Viewport configurado.');

        // Embaralha a ordem das categorias antes de processar
        const shuffledCategories = [...this.categories].sort(() => Math.random() - 0.5);
        const shuffledBairros = [...bairrosSorocaba].sort(() => Math.random() - 0.5);
        console.log('üîß Categorias embaralhadas:', shuffledCategories);
        console.log('üîß Bairros embaralhados:', shuffledBairros);

        for (const category of shuffledCategories) {
            console.log(`üîç Iniciando busca para categoria: ${category}`);
            for (const bairro of shuffledBairros) {
                try {
                    console.log(`‚û°Ô∏è  Buscando no bairro: ${bairro}`);
                    const url = `https://www.google.com/maps/search/${encodeURIComponent(category)}+${encodeURIComponent(bairro)}+Sorocaba+SP`;
                    console.log(`üåê Navegando para URL: ${url}`);
                    await page.goto(url, { waitUntil: 'networkidle2' });

                    console.log('‚è≥ Aguardando seletor do container de resultados...');
                    await page.waitForSelector('.m6QErb.DxyBCb.kA9KIf.dS8AEf', { timeout: 10000 });

                    console.log('‚è≥ Aguardando novamente seletor do container de resultados...');
                    await page.waitForSelector('.m6QErb.DxyBCb.kA9KIf.dS8AEf', { timeout: 15000 });
                    const scrollContainers = await page.$$('.m6QErb.DxyBCb.kA9KIf.dS8AEf');
                    console.log(`üîß Containers de scroll encontrados: ${scrollContainers.length}`);

                    if (scrollContainers.length < 2) {
                        console.warn('‚ö†Ô∏è Container de scroll n√£o encontrado. Pulando categoria...');
                        continue;
                    }

                    const scrollTarget = scrollContainers[1];

                    let isAtBottom = false;
                    let attempts = 0;
                    const maxScrolls = 2000;

                    console.log('üîΩ Iniciando scroll para carregar todos os resultados...');
                    while (!isAtBottom && attempts < maxScrolls) {
                        console.log(`üîΩ Scroll attempt ${attempts + 1}`);
                        await page.evaluate((el) => {
                            el.scrollBy(0, 200);
                        }, scrollTarget);

                        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

                        isAtBottom = await page.evaluate(() => {
                            return !!document.querySelector('span.HlvSq');
                        });

                        if (isAtBottom) {
                            console.log('‚úÖ Fim da lista detectado.');
                        }

                        attempts++;
                    }

                    console.log('üìù Extraindo dados dos resultados...');
                    const categoryResults = await page.evaluate(() => {
                        const results = [];
                        const items = document.querySelectorAll('.Nv2PK');

                        items.forEach((el) => {
                            const websiteElement = el.querySelector('.lcr4fd') as HTMLAnchorElement;
                            results.push({
                                name: el.querySelector('.qBF1Pd')?.textContent?.trim(),
                                phone: el.querySelector('.UsdlK')?.textContent?.trim(),
                                website: websiteElement?.href || '',
                                rating: parseFloat(el.querySelector('.MW4etd')?.textContent || '0'),
                                reviews: parseInt(
                                    el.querySelector('.UY7F9')?.textContent?.replace(/\D/g, '') || '0'
                                )
                            });
                        });

                        return results;
                    });

                    console.log(`üî¢ Quantidade de resultados extra√≠dos: ${categoryResults.length}`);

                    const body: Lead[] = categoryResults.map((item) => ({
                        name: item['name'],
                        phone: item['phone'],
                        website: item['website'],
                        rating: item['rating'],
                        reviews: item['reviews'],
                        category: category,
                    }))
                    console.log("üíæ Salvando leads extra√≠dos:", body.length)
                    await cb(body)
                    console.log("‚úÖ Leads salvos com sucesso:", body.length)

                    // Delay anti-detec√ß√£o
                    const delay = 3000 + Math.random() * 5000;
                    console.log(`‚è≥ Aguardando ${delay.toFixed(0)}ms para evitar detec√ß√£o...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                } catch (error) {
                    console.error(`‚ùå Erro ao processar categoria "${category}" no bairro "${bairro}":`, error);
                    continue;
                }
            }
            console.log(`üèÅ Finalizada a categoria: ${category}`);
        }

        await browser.close();
        console.log('üõë Navegador fechado. Scraping finalizado.');
    }
}
